# This is a GitHub Actions workflow file
# Workflows are defined in YAML files in your repository's .github/workflows/ directory

# Required: Name of the workflow (displayed in the Actions tab)
name: Learn GitHub Actions

# Optional: Description of what this workflow does
run-name: Learning GitHub Actions workflow triggered by ${{ github.actor }}

# Required: Events that trigger the workflow
on:
  # Trigger on push to main branch
  push:
    # Path filters
    paths:
      - "src/**" # Any file in src/ and subdirectories
      - "docs/*.md" # Markdown files in docs/ only
      - "**.js" # JavaScript files anywhere
      - "!src/test/**" # Exclude test files
      - "config/[a-z]*.yml" # YAML files starting with lowercase letter

    # Branch filters
    branches:
      - main
      - "release/v[0-9].[0-9]" # release/v1.0, release/v2.1, etc.
      - "feature/*" # Any feature branch
      - "!experimental" # Exclude experimental branch

    # Tag filters
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+" # Semantic version tags
      - "!*-alpha" # Exclude alpha tags

  # Trigger on pull requests to main
  pull_request:
    branches: [main]

  # Trigger manually from the GitHub UI
  workflow_dispatch:
    # Optional: Define inputs for manual trigger
    inputs:
      example-input:
        description: "An example input for manual trigger"
        required: false # Whether this input is required
        default: "default-value"
        type: string # type can be string, boolean, choice, environment, or number

  # Trigger on a schedule (cron syntax)
  schedule:
    - cron: "0 0 * * *" # Daily at midnight UTC

# Environment variables available to all jobs
env:
  NODE_VERSION: 18
  PYTHON_VERSION: "3.9"

# Use permissions to modify the default permissions granted to the GITHUB_TOKEN

# Permissions define what the GITHUB_TOKEN can do
permissions:
  write-all # write-all|read-all or disable with {}
  # actions: read|write|none
  # attestations: read|write|none
  # checks: read|write|none
  # contents: read|write|none
  # deployments: read|write|none
  # id-token: write|none
  # issues: read|write|none
  # models: read|none
  # discussions: read|write|none
  # packages: read|write|none
  # pages: read|write|none
  # pull-requests: read|write|none
  # security-events: read|write|none
  # statuses: read|write|none

# provide default shell and working-directory options for all run steps
defaults:
  run:
    shell: bash
    working-directory: ./scripts

# Concurrency allows you to control the concurrency of workflow runs.
concurrency:
  # The concurrency key is used to group workflows or jobs together into a concurrency group.
  group: ci-${{ github.ref }}
  # Cancel any in-progress job or run
  cancel-in-progress: true

# Jobs are the core building blocks of workflows
# All jobs run in parallel by default, each job is a new clean runner environment
jobs:
  # Job ID (can be referenced by other jobs)
  basic-job:
    # Human-readable name for the job
    name: Basic Job Example

    # The type of runner to use
    runs-on: ubuntu-latest

    # Job level environment variables
    env:
      JOB_ENV: "development"

    # Conditionally run this job
    if: 1 == 1

    # Outputs from this job can be used by other jobs
    outputs:
      example-output: "Hello, World!"

    # List of steps to execute
    steps:
      # GitHub Actions are called with the uses keyword
      - uses: sormuras/hello-world-java-action@v1
        # Steps can have names for better readability
        name: My first step
        with:
          # Inputs are parameters passed to the action
          who-to-greet: "Mona the Octocat"

      # Reference a specific commit
      - uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3
      # Reference the major version of a release
      - uses: actions/checkout@v4
      # Reference a specific version
      - uses: actions/checkout@v4.2.0
      # Reference a branch
      - uses: actions/checkout@main

      # Run a simple shell command
      - run: echo "Hello, GitHub Actions!"

      # Run multiple commands
      - run: |
          echo "Line 1"
          echo "Line 2"
          echo "Current directory: $(pwd)"
          echo "Files: $(ls -la)"
          echo "Node version: $NODE_VERSION"
          echo "STEP_ENV: $STEP_ENV"
          echo "step-output=Hello, World!" >> $GITHUB_OUTPUT
        # use the id to reference this step later
        id: example-step
        # The maximum time this step can run before being cancelled
        timeout-minutes: 5
        # Whether to continue running the workflow if this step fails
        continue-on-error: true
        env:
          # Step-level environment variable
          STEP_ENV: "step-value"
        # Specify the working directory for this step
        working-directory: ./scripts

      # Use the outputs from a previous step
      - run: echo "${{ steps.example-step.outputs.step-output }}"

      # Conditionally run a step
      # The github context contains information about the workflow run and the event that triggered the run.
      - if: ${{ github.ref == 'refs/heads/main' }}
        run: echo "Deploying to production server on branch $GITHUB_REF"

      # Create output example-output
      - name: Create output
        id: example-output
        run: echo "example-output=Hello, World!" >> $GITHUB_OUTPUT

  # Job with conditions and matrix strategy
  build-matrix:
    name: Build Matrix
    runs-on: ${{ matrix.os }}

    # Run this job only if the basic-job succeeds
    needs: basic-job

    # Run this job only on push events (not PRs)
    if: github.event_name == 'push'

    # Matrix strategy: run job multiple times with different configurations
    strategy:
      # Don't cancel other matrix jobs if one fails
      fail-fast: false
      # The maximum number of jobs to run in parallel
      max-parallel: 10
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16, 18, 20]
        # Exclude specific combinations
        exclude:
          - os: windows-latest
            node-version: 16

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  # Job demonstrating various GitHub Actions features
  advanced-features:
    name: Advanced Features
    runs-on: ubuntu-latest

    # Set permissions for the GITHUB_TOKEN
    permissions:
      contents: read
      pull-requests: write
      issues: write

    # Use outputs from other jobs
    needs: basic-job

    # Timeout after 10 minutes
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      # Use conditional steps
      - name: Only on main branch
        if: github.ref == 'refs/heads/main'
        run: echo "This only runs on main branch"

      # Step that continues on error
      - name: Step that might fail
        continue-on-error: true
        run: exit 1

      # Upload artifacts
      - name: Create artifact
        run: |
          mkdir -p artifacts
          echo "Build artifact" > artifacts/output.txt
          echo "Build number: ${{ github.run_number }}" >> artifacts/output.txt

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: artifacts/
          retention-days: 30

      # Set job outputs
      - name: Set outputs
        id: vars
        run: |
          echo "build-time=$(date)" >> $GITHUB_OUTPUT
          echo "commit-sha=${{ github.sha }}" >> $GITHUB_OUTPUT

      # Use step outputs
      - name: Use outputs
        run: |
          echo "Build time: ${{ steps.vars.outputs.build-time }}"
          echo "Commit SHA: ${{ steps.vars.outputs.commit-sha }}"

  container-test-job:
    runs-on: ubuntu-latest
    container:
      image: node:18
      env:
        NODE_ENV: development
      ports:
        - 80
      volumes:
        - my_docker_volume:/volume_mount
      options: --cpus 1
    steps:
      - name: Check for dockerenv file
        run: (ls /.dockerenv && echo Found dockerenv) || (echo No dockerenv)

  # Job demonstrating services (databases, caches, etc.)
  services-example:
    name: Services Example
    runs-on: ubuntu-latest

    # Define service containers
    services:
      # PostgreSQL service
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      # Redis service
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Test database connection
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d testdb -c '\l'

      - name: Test Redis connection
        run: |
          sudo apt-get install -y redis-tools
          redis-cli -h localhost -p 6379 ping

  # Job for deployment (typically runs after tests pass)
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest

    # Only run on main branch and after other jobs succeed
    if: github.ref == 'refs/heads/main'
    needs: [build-matrix, advanced-features, services-example]

    # Use environment for deployment protection rules
    environment:
      name: production
      url: https://myapp.example.com

    steps:
      - uses: actions/checkout@v4

      # Download artifacts from previous jobs
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./artifacts

      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          echo "Artifact contents:"
          cat ./artifacts/output.txt
          # Your deployment commands would go here

  secrets-example:
    name: Using Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Use repository secret
        run: echo "Using secret value"
        env:
          API_KEY: ${{ secrets.API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Use secret in action input
        uses: some-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          api-key: ${{ secrets.EXTERNAL_API_KEY }}

  call-workflow-explicit-secrets:
    name: Call Workflow with Explicit Secrets
    uses: octo-org/example-repo/.github/workflows/called-workflow.yml@main
    secrets:
      # Map calling workflow secrets to called workflow secret names
      access-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      api-key: ${{ secrets.EXTERNAL_API_KEY }}
      database-url: ${{ secrets.DATABASE_URL }}

  # Method 2: Inherit all available secrets (recommended for same organization)
  call-workflow-inherit-secrets:
    name: Call Workflow with Inherited Secrets
    uses: ./.github/workflows/called-workflow.yml
    secrets: inherit # Passes ALL available secrets to the called workflow

  environment-secrets-example:
    name: Environment Secrets
    runs-on: ubuntu-latest
    environment: production # Environment secrets are only available in this environment
    steps:
      - name: Deploy with environment secrets
        run: |
          echo "Deploying to production..."
          echo "Using production database credentials"
        env:
          # These secrets are defined at the environment level
          PROD_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
          PROD_API_KEY: ${{ secrets.PROD_API_KEY }}

  secrets-best-practices:
    name: Secrets Best Practices
    runs-on: ubuntu-latest
    steps:
      - name: Correct secret usage
        run: |
          # Secret is automatically masked in logs
          curl -H "Authorization: Bearer $API_TOKEN" https://api.example.com
        env:
          API_TOKEN: ${{ secrets.API_TOKEN }}

      - name: Use secret only when needed
        if: github.ref == 'refs/heads/main'
        run: deploy-to-production.sh
        env:
          DEPLOY_KEY: ${{ secrets.PRODUCTION_DEPLOY_KEY }}

  # Job summaries allow you to display custom Markdown on workflow run summary pages
  job-summaries-example:
    name: Job Summaries Example
    runs-on: ubuntu-latest
    steps:
      - name: Basic job summary
        run: |
          echo "### Hello world! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "This workflow completed successfully!" >> $GITHUB_STEP_SUMMARY

      - name: Generate multiline Markdown content
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # blank line
          echo "- ✅ Unit tests: **PASSED**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Integration tests: **PASSED**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security scan: **PASSED**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total test duration:** 5 minutes 32 seconds" >> $GITHUB_STEP_SUMMARY

      - name: Conditional summary with variables
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "🚀 **Deployed to Production**" >> $GITHUB_STEP_SUMMARY
            echo "- Environment: Production" >> $GITHUB_STEP_SUMMARY
            echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "- Triggered by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "🔧 **Development Build**" >> $GITHUB_STEP_SUMMARY
            echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            echo "- Build number: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Overwrite previous summary content
        run: |
          echo "Initial content" >> $GITHUB_STEP_SUMMARY
          echo "Oops, need to replace this with better content..." > $GITHUB_STEP_SUMMARY
          echo "## Final Summary" >> $GITHUB_STEP_SUMMARY
          echo "This overwrote the previous content." >> $GITHUB_STEP_SUMMARY

      - name: Remove summary if error occurs
        run: |
          echo "Starting process..." >> $GITHUB_STEP_SUMMARY
          # Simulate some work that might fail
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "❌ Process failed, removing summary" >> $GITHUB_STEP_SUMMARY
            rm $GITHUB_STEP_SUMMARY  # Remove the summary file
          else
            echo "✅ Process completed successfully" >> $GITHUB_STEP_SUMMARY
          fi

      # Example with tables and more complex Markdown
      - name: Complex Markdown summary
        run: |
          echo "## Build Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build Time | 3m 45s |" >> $GITHUB_STEP_SUMMARY
          echo "| Bundle Size | 2.4 MB |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Coverage | 92% |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Code Quality" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '{"linting": "passed", "security": "passed", "performance": "A+"}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Workflow commands for communicating with the runner
  workflow-commands-example:
    name: Workflow Commands
    runs-on: ubuntu-latest
    steps:
      # Setting environment variables
      - name: Set environment variables
        run: |
          echo "MY_ENV_VAR=production" >> $GITHUB_ENV
          echo "BUILD_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV

      # Using environment variables
      - name: Use environment variables
        run: |
          echo "Environment: $MY_ENV_VAR"
          echo "Build: $BUILD_NUMBER"

      # Setting step outputs
      - name: Set step outputs
        id: step-outputs
        run: |
          echo "timestamp=$(date)" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      # Adding to system PATH
      - name: Add to PATH
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "Custom path added"

      # Debug messages (requires ACTIONS_STEP_DEBUG=true secret)
      - name: Debug messages
        run: |
          echo "::debug::This is a debug message"
          echo "::debug::Variables: MY_ENV_VAR=$MY_ENV_VAR"

      # Notice, warning, and error annotations
      - name: Create annotations
        run: |
          echo "::notice file=app.js,line=1,col=5,title=Code Notice::Consider optimizing this function"
          echo "::warning file=app.js,line=10,title=Deprecation Warning::This method will be removed in v2.0"
          echo "::error file=app.js,line=15,col=3,title=Syntax Error::Missing semicolon"

      # Grouping log output
      - name: Grouped output
        run: |
          echo "::group::Installing dependencies"
          echo "Installing package 1..."
          echo "Installing package 2..."
          echo "Installing package 3..."
          echo "::endgroup::"
          
          echo "::group::Running tests"
          echo "Running unit tests..."
          echo "Running integration tests..."
          echo "::endgroup::"

      # Masking sensitive values
      - name: Mask sensitive data
        run: |
          SECRET_VALUE="super-secret-token-123"
          echo "::add-mask::$SECRET_VALUE"
          echo "Token: $SECRET_VALUE"  # Will show as ***

      # Multiline environment variables
      - name: Multiline environment variables
        run: |
          {
            echo 'JSON_CONFIG<<EOF'
            echo '{'
            echo '  "environment": "production",'
            echo '  "debug": false'
            echo '}'
            echo 'EOF'
          } >> $GITHUB_ENV

      # Use multiline variable
      - name: Use multiline variable
        run: |
          echo "Configuration:"
          echo "$JSON_CONFIG"

      # Stop/start workflow commands
      - name: Stop and start commands
        run: |
          echo "::warning::This warning will show"
          stopMarker=$(uuidgen)
          echo "::stop-commands::$stopMarker"
          echo "::warning::This warning will NOT show"
          echo "::$stopMarker::"
          echo "::notice::Commands are active again"

# Common GitHub Actions expressions and contexts:

# ${{ github.actor }}           - User who triggered the workflow
# ${{ github.event_name }}      - Event that triggered the workflow
# ${{ github.ref }}             - Git reference (branch/tag)
# ${{ github.sha }}             - Commit SHA
# ${{ github.repository }}      - Repository name (owner/repo)
# ${{ github.workspace }}       - Workspace directory path
# ${{ github.run_number }}      - Unique run number
# ${{ github.run_id }}          - Unique run ID

# ${{ env.VARIABLE_NAME }}      - Environment variable
# ${{ secrets.SECRET_NAME }}    - Repository/organization secret
# ${{ vars.VARIABLE_NAME }}     - Repository/organization variable

# ${{ steps.step-id.outputs.output-name }}  - Step output
# ${{ jobs.job-id.outputs.output-name }}    - Job output
# ${{ needs.job-id.result }}                - Job result (success, failure, cancelled, skipped)

# ${{ matrix.variable }}        - Matrix variable
# ${{ strategy.job-index }}     - Job index in matrix

# Functions available in expressions:
# ${{ contains('hello world', 'hello') }}   - true
# ${{ startsWith('hello world', 'hello') }} - true
# ${{ endsWith('hello world', 'world') }}   - true
# ${{ format('Hello {0}!', 'world') }}      - "Hello world!"
# ${{ join(array, ',') }}                   - Join array elements
# ${{ toJSON(object) }}                     - Convert to JSON string
# ${{ fromJSON(string) }}                   - Parse JSON string

# Common workflow triggers:
# on: push                      - Any push
# on: pull_request             - PR opened, synchronized, reopened
# on: release                  - Release published
# on: issues                   - Issue opened, edited, etc.
# on: workflow_dispatch        - Manual trigger
# on: repository_dispatch      - External API trigger
# on: schedule                 - Cron schedule

# Path filtering:
# on:
#   push:
#     paths: ['src/**', '!src/docs/**']  - Only changes to src/ except docs

# Common actions from the marketplace:
# actions/checkout@v4          - Checkout repository
# actions/setup-node@v4        - Setup Node.js
# actions/setup-python@v4      - Setup Python
# actions/cache@v3             - Cache dependencies
# actions/upload-artifact@v4   - Upload build artifacts
# actions/download-artifact@v4 - Download artifacts

# Creating custom actions:
# You can create JavaScript, Docker, or composite actions
# Place action.yml in the root of your action repository

# Example action.yml for a composite action:
# name: 'My Custom Action'
# description: 'A custom composite action'
# inputs:
#   input-name:
#     description: 'Input description'
#     required: true
#     default: 'default-value'
# outputs:
#   output-name:
#     description: 'Output description'
#     value: ${{ steps.step-id.outputs.value }}
# runs:
#   using: 'composite'
#   steps:
#     - run: echo "Hello ${{ inputs.input-name }}"
#       shell: bash

# Security best practices:
# - Use specific action versions (e.g., @v4, not @main)
# - Limit permissions with the 'permissions' key
# - Use environments for sensitive deployments
# - Store sensitive data in secrets, not variables
# - Use GITHUB_TOKEN instead of personal access tokens when possible
# - Review third-party actions before using them

# WORKFLOW COMMANDS REFERENCE:
# 
# Environment Variables:
# echo "name=value" >> $GITHUB_ENV              - Set environment variable
# echo "name<<EOF" >> $GITHUB_ENV; echo "multi"; echo "line"; echo "EOF" >> $GITHUB_ENV
#
# Step Outputs: 
# echo "name=value" >> $GITHUB_OUTPUT           - Set step output
#
# System PATH:
# echo "/path/to/add" >> $GITHUB_PATH           - Add directory to PATH
#
# Job Summary:
# echo "# Markdown content" >> $GITHUB_STEP_SUMMARY  - Add to job summary
# echo "content" > $GITHUB_STEP_SUMMARY         - Overwrite job summary
# rm $GITHUB_STEP_SUMMARY                      - Remove job summary
#
# Annotations:
# echo "::debug::message"                       - Debug message (needs ACTIONS_STEP_DEBUG=true)
# echo "::notice::message"                      - Notice annotation
# echo "::warning::message"                     - Warning annotation  
# echo "::error::message"                       - Error annotation
# echo "::notice file=f.js,line=1,col=5,title=Title::message" - Annotation with location
#
# Log Grouping:
# echo "::group::Group Title"                   - Start collapsible group
# echo "::endgroup::"                           - End group
#
